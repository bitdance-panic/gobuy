// Code generated by Kitex v0.12.1. DO NOT EDIT.

package productservice

import (
	"context"
	"errors"
	product "github.com/bitdance-panic/gobuy/app/rpc/kitex_gen/product"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"createProduct": kitex.NewMethodInfo(
		createProductHandler,
		newProductServiceCreateProductArgs,
		newProductServiceCreateProductResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"updateProduct": kitex.NewMethodInfo(
		updateProductHandler,
		newProductServiceUpdateProductArgs,
		newProductServiceUpdateProductResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"deleteProduct": kitex.NewMethodInfo(
		deleteProductHandler,
		newProductServiceDeleteProductArgs,
		newProductServiceDeleteProductResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"getProductByID": kitex.NewMethodInfo(
		getProductByIDHandler,
		newProductServiceGetProductByIDArgs,
		newProductServiceGetProductByIDResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"searchProducts": kitex.NewMethodInfo(
		searchProductsHandler,
		newProductServiceSearchProductsArgs,
		newProductServiceSearchProductsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	productServiceServiceInfo                = NewServiceInfo()
	productServiceServiceInfoForClient       = NewServiceInfoForClient()
	productServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return productServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return productServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return productServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "ProductService"
	handlerType := (*product.ProductService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "product",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.12.1",
		Extra:           extra,
	}
	return svcInfo
}

func createProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.ProductServiceCreateProductArgs)
	realResult := result.(*product.ProductServiceCreateProductResult)
	success, err := handler.(product.ProductService).CreateProduct(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProductServiceCreateProductArgs() interface{} {
	return product.NewProductServiceCreateProductArgs()
}

func newProductServiceCreateProductResult() interface{} {
	return product.NewProductServiceCreateProductResult()
}

func updateProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.ProductServiceUpdateProductArgs)
	realResult := result.(*product.ProductServiceUpdateProductResult)
	success, err := handler.(product.ProductService).UpdateProduct(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProductServiceUpdateProductArgs() interface{} {
	return product.NewProductServiceUpdateProductArgs()
}

func newProductServiceUpdateProductResult() interface{} {
	return product.NewProductServiceUpdateProductResult()
}

func deleteProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.ProductServiceDeleteProductArgs)
	realResult := result.(*product.ProductServiceDeleteProductResult)
	success, err := handler.(product.ProductService).DeleteProduct(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProductServiceDeleteProductArgs() interface{} {
	return product.NewProductServiceDeleteProductArgs()
}

func newProductServiceDeleteProductResult() interface{} {
	return product.NewProductServiceDeleteProductResult()
}

func getProductByIDHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.ProductServiceGetProductByIDArgs)
	realResult := result.(*product.ProductServiceGetProductByIDResult)
	success, err := handler.(product.ProductService).GetProductByID(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProductServiceGetProductByIDArgs() interface{} {
	return product.NewProductServiceGetProductByIDArgs()
}

func newProductServiceGetProductByIDResult() interface{} {
	return product.NewProductServiceGetProductByIDResult()
}

func searchProductsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.ProductServiceSearchProductsArgs)
	realResult := result.(*product.ProductServiceSearchProductsResult)
	success, err := handler.(product.ProductService).SearchProducts(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProductServiceSearchProductsArgs() interface{} {
	return product.NewProductServiceSearchProductsArgs()
}

func newProductServiceSearchProductsResult() interface{} {
	return product.NewProductServiceSearchProductsResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateProduct(ctx context.Context, req *product.CreateProductRequest) (r *product.CreateProductResponse, err error) {
	var _args product.ProductServiceCreateProductArgs
	_args.Req = req
	var _result product.ProductServiceCreateProductResult
	if err = p.c.Call(ctx, "createProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateProduct(ctx context.Context, req *product.UpdateProductRequest) (r *product.UpdateProductResponse, err error) {
	var _args product.ProductServiceUpdateProductArgs
	_args.Req = req
	var _result product.ProductServiceUpdateProductResult
	if err = p.c.Call(ctx, "updateProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteProduct(ctx context.Context, req *product.DeleteProductRequest) (r *product.DeleteProductResponse, err error) {
	var _args product.ProductServiceDeleteProductArgs
	_args.Req = req
	var _result product.ProductServiceDeleteProductResult
	if err = p.c.Call(ctx, "deleteProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetProductByID(ctx context.Context, req *product.GetProductByIDRequest) (r *product.GetProductByIDResponse, err error) {
	var _args product.ProductServiceGetProductByIDArgs
	_args.Req = req
	var _result product.ProductServiceGetProductByIDResult
	if err = p.c.Call(ctx, "getProductByID", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SearchProducts(ctx context.Context, req *product.SearchProductsRequest) (r *product.SearchProductsResponse, err error) {
	var _args product.ProductServiceSearchProductsArgs
	_args.Req = req
	var _result product.ProductServiceSearchProductsResult
	if err = p.c.Call(ctx, "searchProducts", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
