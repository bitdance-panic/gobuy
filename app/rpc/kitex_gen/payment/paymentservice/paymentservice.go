// Code generated by Kitex v0.12.1. DO NOT EDIT.

package paymentservice

import (
	"context"
	"errors"
	payment "github.com/bitdance-panic/gobuy/app/rpc/kitex_gen/payment"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"createPayment": kitex.NewMethodInfo(
		createPaymentHandler,
		newPaymentServiceCreatePaymentArgs,
		newPaymentServiceCreatePaymentResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"getPayment": kitex.NewMethodInfo(
		getPaymentHandler,
		newPaymentServiceGetPaymentArgs,
		newPaymentServiceGetPaymentResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"updatePayment": kitex.NewMethodInfo(
		updatePaymentHandler,
		newPaymentServiceUpdatePaymentArgs,
		newPaymentServiceUpdatePaymentResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"deletePayment": kitex.NewMethodInfo(
		deletePaymentHandler,
		newPaymentServiceDeletePaymentArgs,
		newPaymentServiceDeletePaymentResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	paymentServiceServiceInfo                = NewServiceInfo()
	paymentServiceServiceInfoForClient       = NewServiceInfoForClient()
	paymentServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return paymentServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return paymentServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return paymentServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "PaymentService"
	handlerType := (*payment.PaymentService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "payment",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.12.1",
		Extra:           extra,
	}
	return svcInfo
}

func createPaymentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*payment.PaymentServiceCreatePaymentArgs)
	realResult := result.(*payment.PaymentServiceCreatePaymentResult)
	success, err := handler.(payment.PaymentService).CreatePayment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPaymentServiceCreatePaymentArgs() interface{} {
	return payment.NewPaymentServiceCreatePaymentArgs()
}

func newPaymentServiceCreatePaymentResult() interface{} {
	return payment.NewPaymentServiceCreatePaymentResult()
}

func getPaymentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*payment.PaymentServiceGetPaymentArgs)
	realResult := result.(*payment.PaymentServiceGetPaymentResult)
	success, err := handler.(payment.PaymentService).GetPayment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPaymentServiceGetPaymentArgs() interface{} {
	return payment.NewPaymentServiceGetPaymentArgs()
}

func newPaymentServiceGetPaymentResult() interface{} {
	return payment.NewPaymentServiceGetPaymentResult()
}

func updatePaymentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*payment.PaymentServiceUpdatePaymentArgs)
	realResult := result.(*payment.PaymentServiceUpdatePaymentResult)
	success, err := handler.(payment.PaymentService).UpdatePayment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPaymentServiceUpdatePaymentArgs() interface{} {
	return payment.NewPaymentServiceUpdatePaymentArgs()
}

func newPaymentServiceUpdatePaymentResult() interface{} {
	return payment.NewPaymentServiceUpdatePaymentResult()
}

func deletePaymentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*payment.PaymentServiceDeletePaymentArgs)
	realResult := result.(*payment.PaymentServiceDeletePaymentResult)
	success, err := handler.(payment.PaymentService).DeletePayment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPaymentServiceDeletePaymentArgs() interface{} {
	return payment.NewPaymentServiceDeletePaymentArgs()
}

func newPaymentServiceDeletePaymentResult() interface{} {
	return payment.NewPaymentServiceDeletePaymentResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreatePayment(ctx context.Context, req *payment.CreatePaymentRequest) (r *payment.CreatePaymentResponse, err error) {
	var _args payment.PaymentServiceCreatePaymentArgs
	_args.Req = req
	var _result payment.PaymentServiceCreatePaymentResult
	if err = p.c.Call(ctx, "createPayment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetPayment(ctx context.Context, req *payment.GetPaymentRequest) (r *payment.GetPaymentResponse, err error) {
	var _args payment.PaymentServiceGetPaymentArgs
	_args.Req = req
	var _result payment.PaymentServiceGetPaymentResult
	if err = p.c.Call(ctx, "getPayment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdatePayment(ctx context.Context, req *payment.UpdatePaymentRequest) (r *payment.UpdatePaymentResponse, err error) {
	var _args payment.PaymentServiceUpdatePaymentArgs
	_args.Req = req
	var _result payment.PaymentServiceUpdatePaymentResult
	if err = p.c.Call(ctx, "updatePayment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeletePayment(ctx context.Context, req *payment.DeletePaymentRequest) (r *payment.DeletePaymentResponse, err error) {
	var _args payment.PaymentServiceDeletePaymentArgs
	_args.Req = req
	var _result payment.PaymentServiceDeletePaymentResult
	if err = p.c.Call(ctx, "deletePayment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
