// Code generated by Kitex v0.12.2. DO NOT EDIT.

package orderservice

import (
	"context"
	"errors"
	order "github.com/bitdance-panic/gobuy/app/rpc/kitex_gen/order"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"createOrder": kitex.NewMethodInfo(
		createOrderHandler,
		newOrderServiceCreateOrderArgs,
		newOrderServiceCreateOrderResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"updateOrderStatus": kitex.NewMethodInfo(
		updateOrderStatusHandler,
		newOrderServiceUpdateOrderStatusArgs,
		newOrderServiceUpdateOrderStatusResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"getOrder": kitex.NewMethodInfo(
		getOrderHandler,
		newOrderServiceGetOrderArgs,
		newOrderServiceGetOrderResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"listUserOrder": kitex.NewMethodInfo(
		listUserOrderHandler,
		newOrderServiceListUserOrderArgs,
		newOrderServiceListUserOrderResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"adminListOrder": kitex.NewMethodInfo(
		adminListOrderHandler,
		newOrderServiceAdminListOrderArgs,
		newOrderServiceAdminListOrderResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"createUserAddress": kitex.NewMethodInfo(
		createUserAddressHandler,
		newOrderServiceCreateUserAddressArgs,
		newOrderServiceCreateUserAddressResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"deleteUserAddress": kitex.NewMethodInfo(
		deleteUserAddressHandler,
		newOrderServiceDeleteUserAddressArgs,
		newOrderServiceDeleteUserAddressResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"updateUserAddress": kitex.NewMethodInfo(
		updateUserAddressHandler,
		newOrderServiceUpdateUserAddressArgs,
		newOrderServiceUpdateUserAddressResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"getUserAddress": kitex.NewMethodInfo(
		getUserAddressHandler,
		newOrderServiceGetUserAddressArgs,
		newOrderServiceGetUserAddressResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"updateOrderAddress": kitex.NewMethodInfo(
		updateOrderAddressHandler,
		newOrderServiceUpdateOrderAddressArgs,
		newOrderServiceUpdateOrderAddressResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	orderServiceServiceInfo                = NewServiceInfo()
	orderServiceServiceInfoForClient       = NewServiceInfoForClient()
	orderServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return orderServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return orderServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return orderServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "OrderService"
	handlerType := (*order.OrderService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "order",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.12.2",
		Extra:           extra,
	}
	return svcInfo
}

func createOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*order.OrderServiceCreateOrderArgs)
	realResult := result.(*order.OrderServiceCreateOrderResult)
	success, err := handler.(order.OrderService).CreateOrder(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newOrderServiceCreateOrderArgs() interface{} {
	return order.NewOrderServiceCreateOrderArgs()
}

func newOrderServiceCreateOrderResult() interface{} {
	return order.NewOrderServiceCreateOrderResult()
}

func updateOrderStatusHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*order.OrderServiceUpdateOrderStatusArgs)
	realResult := result.(*order.OrderServiceUpdateOrderStatusResult)
	success, err := handler.(order.OrderService).UpdateOrderStatus(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newOrderServiceUpdateOrderStatusArgs() interface{} {
	return order.NewOrderServiceUpdateOrderStatusArgs()
}

func newOrderServiceUpdateOrderStatusResult() interface{} {
	return order.NewOrderServiceUpdateOrderStatusResult()
}

func getOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*order.OrderServiceGetOrderArgs)
	realResult := result.(*order.OrderServiceGetOrderResult)
	success, err := handler.(order.OrderService).GetOrder(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newOrderServiceGetOrderArgs() interface{} {
	return order.NewOrderServiceGetOrderArgs()
}

func newOrderServiceGetOrderResult() interface{} {
	return order.NewOrderServiceGetOrderResult()
}

func listUserOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*order.OrderServiceListUserOrderArgs)
	realResult := result.(*order.OrderServiceListUserOrderResult)
	success, err := handler.(order.OrderService).ListUserOrder(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newOrderServiceListUserOrderArgs() interface{} {
	return order.NewOrderServiceListUserOrderArgs()
}

func newOrderServiceListUserOrderResult() interface{} {
	return order.NewOrderServiceListUserOrderResult()
}

func adminListOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*order.OrderServiceAdminListOrderArgs)
	realResult := result.(*order.OrderServiceAdminListOrderResult)
	success, err := handler.(order.OrderService).AdminListOrder(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newOrderServiceAdminListOrderArgs() interface{} {
	return order.NewOrderServiceAdminListOrderArgs()
}

func newOrderServiceAdminListOrderResult() interface{} {
	return order.NewOrderServiceAdminListOrderResult()
}

func createUserAddressHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*order.OrderServiceCreateUserAddressArgs)
	realResult := result.(*order.OrderServiceCreateUserAddressResult)
	success, err := handler.(order.OrderService).CreateUserAddress(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newOrderServiceCreateUserAddressArgs() interface{} {
	return order.NewOrderServiceCreateUserAddressArgs()
}

func newOrderServiceCreateUserAddressResult() interface{} {
	return order.NewOrderServiceCreateUserAddressResult()
}

func deleteUserAddressHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*order.OrderServiceDeleteUserAddressArgs)
	realResult := result.(*order.OrderServiceDeleteUserAddressResult)
	success, err := handler.(order.OrderService).DeleteUserAddress(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newOrderServiceDeleteUserAddressArgs() interface{} {
	return order.NewOrderServiceDeleteUserAddressArgs()
}

func newOrderServiceDeleteUserAddressResult() interface{} {
	return order.NewOrderServiceDeleteUserAddressResult()
}

func updateUserAddressHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*order.OrderServiceUpdateUserAddressArgs)
	realResult := result.(*order.OrderServiceUpdateUserAddressResult)
	success, err := handler.(order.OrderService).UpdateUserAddress(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newOrderServiceUpdateUserAddressArgs() interface{} {
	return order.NewOrderServiceUpdateUserAddressArgs()
}

func newOrderServiceUpdateUserAddressResult() interface{} {
	return order.NewOrderServiceUpdateUserAddressResult()
}

func getUserAddressHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*order.OrderServiceGetUserAddressArgs)
	realResult := result.(*order.OrderServiceGetUserAddressResult)
	success, err := handler.(order.OrderService).GetUserAddress(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newOrderServiceGetUserAddressArgs() interface{} {
	return order.NewOrderServiceGetUserAddressArgs()
}

func newOrderServiceGetUserAddressResult() interface{} {
	return order.NewOrderServiceGetUserAddressResult()
}

func updateOrderAddressHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*order.OrderServiceUpdateOrderAddressArgs)
	realResult := result.(*order.OrderServiceUpdateOrderAddressResult)
	success, err := handler.(order.OrderService).UpdateOrderAddress(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newOrderServiceUpdateOrderAddressArgs() interface{} {
	return order.NewOrderServiceUpdateOrderAddressArgs()
}

func newOrderServiceUpdateOrderAddressResult() interface{} {
	return order.NewOrderServiceUpdateOrderAddressResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateOrder(ctx context.Context, req *order.CreateOrderReq) (r *order.CreateOrderResp, err error) {
	var _args order.OrderServiceCreateOrderArgs
	_args.Req = req
	var _result order.OrderServiceCreateOrderResult
	if err = p.c.Call(ctx, "createOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateOrderStatus(ctx context.Context, req *order.UpdateOrderStatusReq) (r *order.UpdateOrderStatusResp, err error) {
	var _args order.OrderServiceUpdateOrderStatusArgs
	_args.Req = req
	var _result order.OrderServiceUpdateOrderStatusResult
	if err = p.c.Call(ctx, "updateOrderStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetOrder(ctx context.Context, req *order.GetOrderReq) (r *order.GetOrderResp, err error) {
	var _args order.OrderServiceGetOrderArgs
	_args.Req = req
	var _result order.OrderServiceGetOrderResult
	if err = p.c.Call(ctx, "getOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListUserOrder(ctx context.Context, req *order.ListOrderReq) (r *order.ListOrderResp, err error) {
	var _args order.OrderServiceListUserOrderArgs
	_args.Req = req
	var _result order.OrderServiceListUserOrderResult
	if err = p.c.Call(ctx, "listUserOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AdminListOrder(ctx context.Context, req *order.ListOrderReq) (r *order.ListOrderResp, err error) {
	var _args order.OrderServiceAdminListOrderArgs
	_args.Req = req
	var _result order.OrderServiceAdminListOrderResult
	if err = p.c.Call(ctx, "adminListOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateUserAddress(ctx context.Context, req *order.CreateUserAddressReq) (r *order.CreateUserAddressResp, err error) {
	var _args order.OrderServiceCreateUserAddressArgs
	_args.Req = req
	var _result order.OrderServiceCreateUserAddressResult
	if err = p.c.Call(ctx, "createUserAddress", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteUserAddress(ctx context.Context, req *order.DeleteUserAddressReq) (r *order.DeleteUserAddressResp, err error) {
	var _args order.OrderServiceDeleteUserAddressArgs
	_args.Req = req
	var _result order.OrderServiceDeleteUserAddressResult
	if err = p.c.Call(ctx, "deleteUserAddress", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateUserAddress(ctx context.Context, req *order.UpdateUserAddressReq) (r *order.UpdateUserAddressResp, err error) {
	var _args order.OrderServiceUpdateUserAddressArgs
	_args.Req = req
	var _result order.OrderServiceUpdateUserAddressResult
	if err = p.c.Call(ctx, "updateUserAddress", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserAddress(ctx context.Context, req *order.GetUserAddressReq) (r *order.GetUserAddressResp, err error) {
	var _args order.OrderServiceGetUserAddressArgs
	_args.Req = req
	var _result order.OrderServiceGetUserAddressResult
	if err = p.c.Call(ctx, "getUserAddress", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateOrderAddress(ctx context.Context, req *order.UpdateOrderAddressReq) (r *order.UpdateOrderAddressResp, err error) {
	var _args order.OrderServiceUpdateOrderAddressArgs
	_args.Req = req
	var _result order.OrderServiceUpdateOrderAddressResult
	if err = p.c.Call(ctx, "updateOrderAddress", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
